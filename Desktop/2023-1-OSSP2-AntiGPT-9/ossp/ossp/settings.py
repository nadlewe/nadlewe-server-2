"""
Django settings for ossp project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$h6@htohrps^9q^yjbla0q+ow600-alo#*n54ax$3)#fng5^i+'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'initpage',                     # 초기 페이지
    'login.apps.LoginConfig',       # 로그인 페이지- 이메일 로그인
    'social_django',                # 로그인 페이지- Google 로그인 API
    'home',                         # 메인 페이지 (채팅 페이지)
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'ossp.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'ossp.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

##### 로그인 #####

LOGOUT_REDIRECT_URL = '/'

# 이메일 로그인

AUTH_USER_MODEL = 'login.User'

# Google 로그인 API

SOCIAL_AUTH_URL_NAMESPACE = 'social'

SOCIAL_AUTH_GOOGLE_PLUS_KEY = '167264132659-e2e9qt1vi1smq0qnga77vhgbuhv2b5q7.apps.googleusercontent.com' 

SOCIAL_AUTH_GOOGLE_PLUS_SECRET = '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'

AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend',
    'social_core.backends.google.GooglePlusAuth',
)

SOCIAL_AUTH_PIPELINE = (
    # Get the information we can about the user and return it in a simple
    # format to create the user instance later. On some cases the details are
    # already part of the auth response from the provider, but sometimes this
    # could hit a provider API.    
    'social_core.pipeline.social_auth.social_details',
    #'google_app.views.social_details',
    
    # Get the social uid from whichever service we're authing thru. The uid is
    # the unique identifier of the given user in the provider.    
    'social_core.pipeline.social_auth.social_uid',
    #'google_app.views.social_uid',
    
    # Verifies that the current auth process is valid within the current
    # project, this is where emails and domains whitelists are applied (if defined).
    #'social_core.pipeline.social_auth.auth_allowed',
    'login.views.auth_allowed',
    
    # Checks if the current social-account is already associated in the site.
    #'social_core.pipeline.social_auth.social_user',
    'login.views.social_user',
    
    # Make up a username for this person, appends a random string at the end if
    # there's any collision.
    'social_core.pipeline.social_auth.associate_by_email',
    
    # Send a validation email to the user to verify its email address.
    # Disabled by default.
    # 'social_core.pipeline.mail.mail_validation',
    # Associates the current social details with another user account with
    # a similar email address. Disabled by default.
    # 'social_core.pipeline.social_auth.associate_by_email',
    # Create a user account if we haven't found one yet.
    'social_core.pipeline.user.create_user',
    
    # Create the record that associates the social account with the user.
    'social_core.pipeline.social_auth.associate_user',
    
    # Populate the extra_data field in the social record with the values
    'social_core.pipeline.social_auth.load_extra_data',
    
    # Update the user record with any changed info from the auth service.
    'social_core.pipeline.user.user_details',
)

LOGIN_REDIRECT_URL = 'http://127.0.0.1:8000/social/complete/google-plus/'